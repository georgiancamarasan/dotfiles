local wk = require("which-key")

wk.add({
	noremap = true,
	nowait = true,
	silent = true,
	buffer = nil,
	{
		mode = "i",
		{ "jk", "<ESC>", desc = "ESC alternative", },
	},
	{
		group = "Window",
		mode = "n",
		{ "<C-h>",     "<C-w>h",                     desc = "Jump to left window" },
		{ "<C-j>",     "<C-w>j",                     desc = "Jump to bottom window" },
		{ "<C-k>",     "<C-w>k",                     desc = "Jump to tio window" },
		{ "<C-l>",     "<C-w>l",                     desc = "Jump to right window" },
		{ "<C-Up>",    ":resize -2<CR>",            desc = "Shrink window vertically" },
		{ "<C-Down>",  ":resize +2<CR>",            desc = "Stretch window vertically " },
		{ "<C-Left>",  ":vertical resize -2<CR>",   desc = "Shrink window horizontally" },
		{ "<C-Right>", ":vertical resize +2<CR>",   desc = "Stretch window horizontally " },
		{ "<leader>v", ":vsplit<CR>",               desc = "Split vertically" },
		{ "<leader>e", "<cmd>NvimTreeToggle<cr>",   desc = "Explorer" },
		{ "<leader>t", "<Plug>PlenaryTestFile<CR>", desc = "Run plenary tests" },
		{ "<leader>a", "<cmd>Alpha<cr>",            desc = "Alpha" },
	},
	{
		group = "Buffer",
		mode = "n",
		{ "gp",               ":bp<CR>",                                 desc = "Go to previous buffer" },
		{ "gn",               ":bn<CR>",                                 desc = "Go to next buffer" },
		{ "_",                "<Esc>:m .+1<CR>==",                       desc = "Move line down" },
		{ "-",                "<Esc>:m .-2<CR>==",                       desc = "Move line up" },
		{ "<leader><leader>", "<C-^>",                                   desc = "Quick switch buffer" },
		{ "<leader>x",        ":x<CR>",                                  desc = "Save and close" },
		{ "<leader>q",        ":Bdelete!<CR>",                           desc = "Close buffer" },
		{ "Q<leader>",        ":qa<CR>",                                 desc = "Close all" },
		{ "<leader>rr",       ":w<CR>:source %<CR>",                     desc = "Resource buffer" },
		{ "<leader>w",        ":w<CR>",                                  desc = "Write buffer" },
		{ "<C-s>",            ":wa<CR>",                                 desc = "Save all" },
		{ "<leader>X",        ":x<CR>",                                  desc = "Save and close" },
		{ "<leader>p",        "_dp",                                     desc = "Paste from clipboard" },
		{ "<leader>h",        ":set hlsearch!<CR>",                      desc = "Hide hilight" },
		{ "<leader>/",        "<Plug>(comment_toggle_linewise_current)", desc = "Comment current line" },
	},
	{
		group = "Buffer",
		mode = "v",
		{ "<leader>/", "<Plug>(comment_toggle_blockwise_visual)", desc = "Comment selection" },
		{ "<",         "<gv",                                     desc = "Shift align left" },
		{ ">",         ">gv",                                     desc = "Shift align right" },
		{ "J",         ":m '>+1<CR>gv=gv",                        desc = "Move selection down" },
		{ "K",         ":m '<-2<CR>gv=gv",                        desc = "Move selection up" },
	},
	{
		group = "Buffer",
		mode = "x",
		{ "<leader>/", "<Plug>(comment_toggle_linewise_current)", desc = "Comment current line" },
	},
	{
		group = "Terminal",
		mode = "n",
		{ "<leader>tn", "<cmd>lua _NODE_TOGGLE()<cr>",                      desc = "Node" },
		{ "<leader>tu", "<cmd>lua _NCDU_TOGGLE()<cr>",                      desc = "NCDU" },
		{ "<leader>tt", "<cmd>lua _HTOP_TOGGLE()<cr>",                      desc = "Htop" },
		{ "<leader>tp", "<cmd>lua _PYTHON_TOGGLE()<cr>",                    desc = "Python" },
		{ "<leader>tf", "<cmd>ToggleTerm direction=float<cr>",              desc = "Float" },
		{ "<leader>th", "<cmd>ToggleTerm size=10 direction=horizontal<cr>", desc = "Horizontal" },
		{ "<leader>tv", "<cmd>ToggleTerm size=80 direction=vertical<cr>",   desc = "Vertical" },
	},
	{
		group = "Debug",
		mode = "n",
		{ "<leader>ddb", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Toggle breakpoint" },
		{ "<leader>ddc", "<cmd>lua require'dap'.continue()<cr>",          desc = "Continue" },
		{ "<leader>ddi", "<cmd>lua require'dap'.step_into()<cr>",         desc = "Step into" },
		{ "<leader>ddo", "<cmd>lua require'dap'.step_over()<cr>",         desc = "Step over" },
		{ "<leader>ddO", "<cmd>lua require'dap'.step_out()<cr>",          desc = "Step out" },
		{ "<leader>ddr", "<cmd>lua require'dap'.repl.toggle()<cr>",       desc = "Toggle REPL" },
		{ "<leader>ddl", "<cmd>lua require'dap'.run_last()<cr>",          desc = "Run last" },
		{ "<leader>ddu", "<cmd>lua require'dapui'.toggle()<cr>",          desc = "Toggle DAP" },
		{ "<leader>ddt", "<cmd>lua require'dap'.terminate()<cr>",         desc = "Close DAP" },
	},
	{
		group = "Plugins",
		mode = "n",
		{ "<leader>ps", ":Lazy sync<CR>", desc = "Sync" },
		{ "<leader>pp", ":Lazy show<CR>", desc = "Show" },
	},
	{
		group = "Git",
		mode = "n",
		{ "<leader>gg", "<cmd>lua _LAZYGIT_TOGGLE()<CR>",                    desc = "Lazygit" },
		{ "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>",       desc = "Next Hunk" },
		{ "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>",       desc = "Prev Hunk" },
		{ "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>",      desc = "Blame" },
		{ "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>",    desc = "Preview Hunk" },
		{ "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>",      desc = "Reset Hunk" },
		{ "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>",    desc = "Reset Buffer" },
		{ "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>",      desc = "Stage Hunk" },
		{ "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk", },
		{ "<leader>go", "<cmd>Telescope git_status<cr>",                     desc = "Open changed file" },
		{ "<leader>gb", "<cmd>Telescope git_branches<cr>",                   desc = "Checkout branch" },
		{ "<leader>gc", "<cmd>Telescope git_commits<cr>",                    desc = "Checkout commit" },
		{ "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>",                   desc = "Diff", },
	},
	{
		group = "LSP",
		mode = "n",
		{ "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>",           desc = "Code Action" },
		{ "<leader>lD", "<cmd>Telescope lsp_document_diagnostics<cr>",      desc = "Document Diagnostics", },
		{ "<leader>lw", "<cmd>Telescope lsp_workspace_diagnostics<cr>",     desc = "Workspace Diagnostics", },
		{ "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<CR>",            desc = "Go to definition" },
		{ "<leader>lf", "<cmd>lua vim.lsp.buf.format()<cr>",                desc = "Format" },
		{ "<leader>li", "<cmd>LspInfo<cr>",                                 desc = "Info" },
		{ "<leader>lI", "<cmd>LspInstallInfo<cr>",                          desc = "Installer Info" },
		{ "<leader>lj", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>",      desc = "Next Diagnostic", },
		{ "<leader>lk", "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>",      desc = "Prev Diagnostic", },
		{ "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>",              desc = "CodeLens Action" },
		{ "<leader>lq", "<cmd>lua vim.lsp.diagnostic.set_loclist()<cr>",    desc = "Quickfix" },
		{ "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>",                desc = "Rename" },
		{ "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>",          desc = "Document Symbols" },
		{ "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols", },
	},
	{
		group = "Search",
		mode = "n",
		{ "<leader>sf", "<cmd>Telescope find_files<cr>",                            desc = "Find files" },
		{ "<leader>sb", "<cmd>Telescope buffers<cr>",                               desc = "Find buffer" },
		{ "<leader>sc", "<cmd>Telescope colorscheme<cr>",                           desc = "Colorscheme" },
		{ "<leader>sh", "<cmd>Telescope help_tags<cr>",                             desc = "Find Help" },
		{ "<leader>sM", "<cmd>Telescope man_pages<cr>",                             desc = "Man Pages" },
		{ "<leader>sr", "<cmd>Telescope oldfiles<cr>",                              desc = "Open Recent File" },
		{ "<leader>sR", "<cmd>Telescope registers<cr>",                             desc = "Registers" },
		{ "<leader>sk", "<cmd>Telescope keymaps<cr>",                               desc = "Keymaps" },
		{ "<leader>sC", "<cmd>Telescope commands<cr>",                              desc = "Commands" },
		{ "<leader>sl", "<cmd>require'telescope'.extensions.lazygit.lazygit()<CR>", desc = "Lazygit project" }
	},
	{
		group = "Tab",
		mode = "t",
		{ "<C-h>", "<C-\\><C-N><C-w>h", desc = "Go to previous word" },
		{ "<C-j>", "<C-\\><C-N><C-w>j", desc = "Go to next" },
		{ "<C-k>", "<C-\\><C-N><C-w>k", desc = "Go to previous" },
		{ "<C-l>", "<C-\\><C-N><C-w>l", desc = "Go to next word" },
	},
})
